{"version":3,"sources":["ParameterList.js","ElementList.js","App.js","serviceWorker.js","index.js"],"names":["ParameterList","params","updateParameter","defaultParams","tree","Object","keys","map","paramName","key","htmlFor","id","defaultValue","onChange","ev","target","value","Element","updateTree","i","deleteFunc","updateTreeHere","newSubTree","newTree","JSON","parse","stringify","children","tagName","onClick","icon","faTrash","attributes","attr","disabled","a","name","includes","changedAttr","newAttributes","updateElement","attrName","filter","prompt","push","faPlus","child","splice","deleteChildElement","ElementList","App","useState","setParams","setDefaultParams","setTree","svgString","setSVGString","cmContents","setCMContents","applySVGString","newSVGString","parseParametricSVG","parameters","defaultParameters","cmOptions","lineNumberFormatter","_","lineNumbers","lineWrapping","theme","className","param","newParams","newParamsString","n","join","newSVGAttributes","updateSVGString","rawSVG","document","getElementById","getElementsByTagName","outerHTML","onBlur","options","Editor","data","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c1ee9f5f.chunk.js","sourcesContent":["import React from 'react';\n\nconst ParameterList = ({params, updateParameter, defaultParams, tree}) => {\n    return <>\n        <h2>Parameters</h2>\n\n        {Object.keys(params).map(paramName => {\n                return <li key={`li-${paramName}`}>\n                    <label htmlFor={`input-${paramName}`} key={`label-${paramName}`}>{paramName}</label>:\n                    <input id={`input-${paramName}`} defaultValue={params[paramName]} key={`param-${paramName}`} onChange={ev => updateParameter(paramName, ev.target.value)} />\n                </li>;\n            }\n        )}\n    </>;\n\n};\n\nexport default ParameterList;\n\n","import React from 'react';\nimport { FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faPlus, faTrash} from \"@fortawesome/free-solid-svg-icons\";\n\nconst Element = ({tree, updateTree, i, deleteFunc}) => {\n\n    const updateTreeHere = (newSubTree, i) => {\n        // replace the correct subtree, then propogate upwards\n        let newTree = JSON.parse(JSON.stringify(tree));\n        newTree.children[i] = newSubTree;\n        updateTree(newTree)\n    };\n\n    const addAttribute= () => {\n      const attrName = prompt(\"Attribute name\", \"fill\");\n\n      if (attrName){\n        tree.attributes.push({\n            \"name\": attrName,\n            \"value\": \"\"\n        });\n        updateTree(tree);\n      }\n    };\n\n    const deleteAttribute = (attrName) => {\n        tree.attributes = tree.attributes.filter(attr => attr.name !== attrName);\n        updateTree(tree);\n    };\n\n    const deleteChildElement = (i) => {\n        tree.children.splice(i, 1); // remove i'th child\n        updateTree(tree);\n    };\n\n    return <>\n\n        <li>{tree.tagName} <button onClick={deleteFunc}><FontAwesomeIcon icon={faTrash} /></button>\n\n        <ul>\n            {tree.attributes.map(attr => {\n\n                const updateElement = (changedAttr, value) => {\n                    const newAttributes = tree.attributes.map( a => ({name: a.name, value: (a.name === changedAttr) ? value : a.value} ) );\n                    updateTree({...tree, attributes: newAttributes}, i)\n                };\n\n                const disabled = tree.attributes.map(a => a.name).includes(`parametric:${attr.name}`);\n\n                return <li>\n                    <label htmlFor={`input-${attr.name}`} key={`label-${attr.name}`}>{attr.name}</label>:\n                    <input id={`input-${attr.name}`} disabled={disabled} value={attr.value} key={`param-${attr.name}`} onChange={ev => updateElement(attr.name, ev.target.value)}/>\n                    <button onClick={() => deleteAttribute(attr.name)}><FontAwesomeIcon icon={faTrash} /></button>\n                </li>\n            })}\n            <button onClick={addAttribute}><FontAwesomeIcon icon={faPlus} /></button>\n        </ul>\n\n\n        <ul>\n            {tree.children.map( (child, i) => <Element tree={child} updateTree={updateTreeHere} i={i} deleteFunc={() => deleteChildElement(i)} />)}\n        </ul>\n\n        </li>\n\n    </>\n};\n\n\nconst ElementList = ({tree, updateTree}) => {\n\n    const addElement = () => {\n      const tagName = prompt(\"Tag name\", \"rect\");\n\n      if (tagName){\n        tree.children.push({\n            \"tagName\": tagName,\n            \"id\": \"\",\n            \"className\": {},\n            \"attributes\": [],\n            \"children\": []\n        });\n        updateTree(tree);\n      }\n    };\n\n    return <>\n        <h2>Elements</h2>\n        <Element tree={tree} updateTree={updateTree} i={0} />\n        <button onClick={addElement}><FontAwesomeIcon icon={faPlus} /></button>\n    </>;\n};\n\nexport default ElementList;\n\n","import React, { useState }  from 'react';\nimport './App.css';\n\n\nimport ParameterList from './ParameterList';\nimport ElementList from \"./ElementList\";\n\n\nimport {parseParametricSVG, PreviewSVG} from 'react-parametric-svg';\n\nimport { UnControlled as CodeMirror } from 'react-codemirror2';\n\nimport 'codemirror/mode/shell/shell';\nimport 'codemirror/lib/codemirror.css';\nimport 'codemirror/theme/dracula.css';\n\n\nconst defaultSVGString = `<svg  version=\"1.1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        xmlns:parametric=\"https://parametric-svg.github.io/v0.2\"\n        width=\"500\"\n        height=\"500\"\n        parametric:defaults=\"x=60;y=60;d=5\">\n<circle parametric:cx=\"{x + d}\" parametric:cy=\"{y}\" r=\"40\" stroke=\"black\" stroke-width=\"3\" fill=\"blue\" />\n<circle parametric:cx=\"{x}\" parametric:cy=\"{y}\" r=\"40\" stroke=\"black\" stroke-width=\"3\" fill=\"green\" />\n</svg>`;\n\nfunction App() {\n\n    const [params, setParams] = useState(null);\n    const [defaultParams, setDefaultParams] = useState(null);\n    const [tree, setTree] = useState(null);\n    const [svgString, setSVGString] = useState(defaultSVGString);\n\n    const [cmContents, setCMContents] = useState(null);\n\n    const updateParameter = (param, value) => {\n\n        const newParams = {...params, [param]: value};\n        setParams(newParams);\n\n        const newParamsString = Object.keys(newParams).map(n => `${n}=${newParams[n]}`).join(';');\n\n        const newSVGAttributes = tree.attributes.map(attr => ({\n            name: attr.name,\n            value: attr.name === \"parametric:defaults\" ? newParamsString : attr.value}));\n\n        const newTree = {...tree, attributes: newSVGAttributes};\n        setTree(newTree);\n\n       // newTree\n    };\n\n    const updateTree = (newTree) => {\n        setTree(JSON.parse(JSON.stringify(newTree)));\n    };\n\n    const updateSVGString = () => {\n        const rawSVG = document.getElementById('svg-panel').getElementsByTagName('svg')[0].outerHTML;\n        //const formattedSVG = rawSVG.replace(/>/g,  \">\\n\"); // There is scope for improvement here...\n\n        if (rawSVG !== svgString ){\n            setSVGString(rawSVG);\n            applySVGString(rawSVG);\n        }\n    };\n\n\n\n    const applySVGString = (newSVGString) => {\n        const {parameters, defaultParameters, tree} = parseParametricSVG(newSVGString);\n\n        setParams({...parameters, ...defaultParameters}); // apply defaults where they were defined\n        setDefaultParams(defaultParameters);\n        setTree(tree);\n    };\n\n    if (!params){\n        applySVGString(svgString);\n    }\n\n    const handleSVGStringEdit = (value) => {\n       //  setSVGString(value); // this would a re-render, which re-draws the SVG (but form the tree rather than the svg string); PreviewSVG calls updateSVGString, which replaces the svg sring with what has been rendered\n        applySVGString(value);\n    };\n\n    /*\n    let psvg = new ParametricSVG(svgString);\n    const newParams = {...psvg.params, ...psvg.defaultParameters};\n    if (JSON.stringify(params) !== JSON.stringify(newParams)){setParams(newParams)}\n    if (JSON.stringify(defaultParams) !== JSON.stringify(psvg.defaultParameters)){ setDefaultParams(psvg.defaultParameters)}\n    if (JSON.stringify(tree) !== JSON.stringify(psvg.tree)){ setTree(psvg.tree) }\n*/\n\n\n\n/*\n     if (!params){\n            let psvg = new ParametricSVG(svgString);\n\n            setParams({...psvg.params, ...psvg.defaultParameters}); // apply defaults where they were defined\n            setDefaultParams(psvg.defaultParameters);\n            setTree(psvg.tree);\n\n     } else {\n         console.log(`Params is true: ${JSON.stringify(params)}`)\n     }\n\n*/\n\n\n\n    const loadSVGString = (string) =>{\n         // need to do several things:\n        // re-parse, to set params/default params\n        // set svgString\n    }\n\n\n    let cmOptions = {\n        lineNumberFormatter: _ => '',\n        lineNumbers: true,\n        lineWrapping: true,\n        // mode: Constants.CodeMirror.Mode.SHELL,\n        //readOnly: true,\n        value: svgString,\n        theme: 'dracula'\n    };\n\n\n     var codeMirrorEditor;\n     let codeMirrorEditor2;\n  return (\n\n<div>\n\n    <div className=\"page-header\">\n        <h1>Parametric SVG editor</h1>\n        <p className=\"lead\">An editor for SVG images in which attributes can contain parameters.</p>\n      </div>\n\n    <div className=\"parent\">\n        <div className=\"div1\" id=\"code-panel\">\n\n            <div id=\"parameters\">\n                <ParameterList params={params} defaultParams={defaultParams} updateParameter={updateParameter}/>\n            </div>\n\n            <div id=\"elements\">\n                <ElementList tree={tree}  params={params} defaultParams={defaultParams} updateTree={updateTree}/>\n            </div>\n\n\n        </div>\n\n        <div className=\"div2\" id=\"svg-panel\">\n            <PreviewSVG tree={tree} params={params} defaultParams={defaultParams} updateSVGString={updateSVGString}/>\n        </div>\n\n    </div>\n\n    <CodeMirror value={svgString}  onBlur={() => null} options={cmOptions} onChange={(Editor, data, value) => {setCMContents(value)}}  />\n\n\n    <button onClick={(ev) => {\n        applySVGString(cmContents); // TODO: this updates the SVG, but changes do no propogate to the elements list\n    }} > Update!</button>\n\n    </div>\n  );\n}\n\n//onChange={(editor, data, value) => {handleSVGStringEdit(value)}}\n\n\n\n\n\n\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}