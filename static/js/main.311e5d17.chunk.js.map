{"version":3,"sources":["ParameterList.js","ElementList.js","PreviewSVG.js","ParametricSVG.js","App.js","serviceWorker.js","index.js"],"names":["ParameterList","params","updateParameter","defaultParams","tree","Object","keys","map","paramName","key","htmlFor","id","defaultValue","onChange","ev","target","value","Element","updateTree","i","deleteFunc","updateTreeHere","newSubTree","newTree","JSON","parse","stringify","children","tagName","onClick","icon","faTrash","attributes","attr","disabled","a","name","includes","changedAttr","newAttributes","updateElement","attrName","filter","prompt","push","faPlus","child","splice","deleteChildElement","ElementList","re","attribute_names","d","startsWith","replace","match","g1","g2","math","err","childTags","React","createElement","PreviewSVG","updateSVGString","useEffect","ParametricSVG","svgString","virtualParent","document","virtualSVG","appendChild","outerHTML","innerHTML","lastChild","console","log","this","error","svg","parameters","defaultParameters","childNodes","length","getParameters","getDefaultParamValues","getTree","parentNode","slice","call","className","j","attribute","nodeValue","processExpressionTerm","term","terms","split","isNaN","tagNames","tags","getElementsByTagName","tag","k","substr","setAttribute","defaultAttribute","param","assignments","trim","App","useState","setParams","setDefaultParams","setTree","setSVGString","cmContents","setCMContents","applySVGString","newSVGString","psvg","cmOptions","lineNumberFormatter","_","lineNumbers","lineWrapping","theme","newParams","newParamsString","n","join","newSVGAttributes","rawSVG","getElementById","onBlur","options","Editor","data","Boolean","window","location","hostname","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.311e5d17.chunk.js","sourcesContent":["import React from 'react';\n\nconst ParameterList = ({params, updateParameter, defaultParams, tree}) => {\n    return <>\n        <h2>Parameters</h2>\n\n        {Object.keys(params).map(paramName => {\n                return <li key={`li-${paramName}`}>\n                    <label htmlFor={`input-${paramName}`} key={`label-${paramName}`}>{paramName}</label>:\n                    <input id={`input-${paramName}`} defaultValue={params[paramName]} key={`param-${paramName}`} onChange={ev => updateParameter(paramName, ev.target.value)} />\n                </li>;\n            }\n        )}\n    </>;\n\n};\n\nexport default ParameterList;\n\n","import React from 'react';\nimport { FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faPlus, faTrash} from \"@fortawesome/free-solid-svg-icons\";\n\nconst Element = ({tree, updateTree, i, deleteFunc}) => {\n\n    const updateTreeHere = (newSubTree, i) => {\n        // replace the correct subtree, then propogate upwards\n        let newTree = JSON.parse(JSON.stringify(tree));\n        newTree.children[i] = newSubTree;\n        updateTree(newTree)\n    };\n\n    const addAttribute= () => {\n      const attrName = prompt(\"Attribute name\", \"fill\");\n\n      if (attrName){\n        tree.attributes.push({\n            \"name\": attrName,\n            \"value\": \"\"\n        });\n        updateTree(tree);\n      }\n    };\n\n    const deleteAttribute = (attrName) => {\n        tree.attributes = tree.attributes.filter(attr => attr.name !== attrName);\n        updateTree(tree);\n    };\n\n    const deleteChildElement = (i) => {\n        tree.children.splice(i, 1); // remove i'th child\n        updateTree(tree);\n    };\n\n    return <>\n\n        <li>{tree.tagName} <button onClick={deleteFunc}><FontAwesomeIcon icon={faTrash} /></button>\n\n        <ul>\n            {tree.attributes.map(attr => {\n\n                const updateElement = (changedAttr, value) => {\n                    const newAttributes = tree.attributes.map( a => ({name: a.name, value: (a.name === changedAttr) ? value : a.value} ) );\n                    updateTree({...tree, attributes: newAttributes}, i)\n                };\n\n                const disabled = tree.attributes.map(a => a.name).includes(`parametric:${attr.name}`);\n\n                return <li>\n                    <label htmlFor={`input-${attr.name}`} key={`label-${attr.name}`}>{attr.name}</label>:\n                    <input id={`input-${attr.name}`} disabled={disabled} value={attr.value} key={`param-${attr.name}`} onChange={ev => updateElement(attr.name, ev.target.value)}/>\n                    <button onClick={() => deleteAttribute(attr.name)}><FontAwesomeIcon icon={faTrash} /></button>\n                </li>\n            })}\n            <button onClick={addAttribute}><FontAwesomeIcon icon={faPlus} /></button>\n        </ul>\n\n\n        <ul>\n            {tree.children.map( (child, i) => <Element tree={child} updateTree={updateTreeHere} i={i} deleteFunc={() => deleteChildElement(i)} />)}\n        </ul>\n\n        </li>\n\n    </>\n};\n\n\nconst ElementList = ({tree, updateTree}) => {\n\n    const addElement = () => {\n      const tagName = prompt(\"Tag name\", \"rect\");\n\n      if (tagName){\n        tree.children.push({\n            \"tagName\": tagName,\n            \"id\": \"\",\n            \"className\": {},\n            \"attributes\": [],\n            \"children\": []\n        });\n        updateTree(tree);\n      }\n    };\n\n    return <>\n        <h2>Elements</h2>\n        <Element tree={tree} updateTree={updateTree} i={0} />\n        <button onClick={addElement}><FontAwesomeIcon icon={faPlus} /></button>\n    </>;\n};\n\nexport default ElementList;\n\n","import React, {useEffect} from 'react';\nimport * as math from 'mathjs';\n\n\nconst re = /\\{(.+?)\\}/g;\n\nconst Element = ({tree, params, defaultParams}) => {\n\n    //const CustomTag = `${tree.tagName}`;\n    //return <CustomTag> {tree.children.map(child => <Element tree={child} params={params} defaultParams={defaultParams} />) } </CustomTag>\n\n    var attributes = {};\n    const attribute_names = tree.attributes.map(d => d.name);\n\n    for (let i in tree.attributes) {\n        let name = tree.attributes[i].name;\n        let value = tree.attributes[i].value;\n\n\n        if (name && name.startsWith(\"parametric:\")) {\n\n            attributes[name] = value; // save the parametric version\n\n            value = value.replace(re, function (match, g1, g2) {\n                try {\n                    return math.evaluate(g1, params)\n                } catch (err) {\n                    return null;\n                }\n\n            });\n            attributes[name.replace('parametric:', '')] = value; // save version with paramater values substituted\n        } else if (!attribute_names.includes('parametric:' + name)){\n            attributes[name] = value;\n        } else {\n            // this is the non-paramteric version of an attribute: don't replace value substituted above\n        }\n    }\n\n    const childTags = tree.children.map(child => <Element tree={child} params={params} defaultParams={defaultParams}/>);\n    return React.createElement(tree.tagName, attributes, childTags);\n};\n\n\nconst PreviewSVG = ({params, defaultParams, tree, updateSVGString}) => {\n    useEffect( () => updateSVGString());\n    return <Element tree={tree} params={params} defaultParams={defaultParams} />;\n};\n\nexport default PreviewSVG;\n\n","import * as math from 'mathjs';\n\nclass ParametricSVG {\n\n    constructor (svgString) {\n\n        var virtualParent = document.createElement('div'); // can't set outerHTML of an element with no parent\n        var virtualSVG = document.createElement('svg');\n        virtualSVG.id = 'VIRTUAL-SVG';\n\n        virtualParent.appendChild(virtualSVG);\n        //virtualSVG.innerHTML = svgString;\n\n        if (svgString.includes(\"<svg\")) {\n            virtualSVG.outerHTML = svgString;\n        } else {\n            virtualSVG.innerHTML = svgString;\n        }\n        virtualSVG = virtualParent.lastChild;\n\n      //  const stripWhitespace = string => string.replace(/ /g, '').replace(/\\t/g, '').replace(/\\n/g, '');\n\n        if (!virtualSVG ){\n            console.log(\"Skipping update because of error\")\n            this.error = true;\n            return;\n        } else {\n            console.log(\"This is fine\")\n        }\n\n        this.svg = virtualSVG;\n        this.parameters = {};\n        this.defaultParameters = {};\n\n        let children = virtualSVG.childNodes;\n        for (let i = 0; i < children.length; i++) {\n            this.getParameters(children[i].attributes);\n        }\n\n        this.getDefaultParamValues();\n\n\n        // Construct tree in JSON reflecting tree in SVG\n        this.tree = this.getTree(this.svg);\n    }\n\n\n    getTree(parentNode){\n        const childrenArray = [].slice.call(parentNode.children)\n        const children = childrenArray.map(child => this.getTree(child));\n\n        return {\n            tagName: parentNode.tagName,\n            id: parentNode.id,\n            className: parentNode.className,\n            attributes: [...parentNode.attributes].map(d =>\n                ({name: d.name, value: d.value})),\n            children: children\n        };\n    }\n\n     getParameters(attributes) {\n        // Given a NamedNodeMap or Array of attributes for a tag, identify any parameters not recorded in the parameters array\n\n        if (!attributes) {\n            return;\n        }\n\n        // process only the contents of {}\n        const re = /\\{(.+?)\\}/g;\n\n\n        for (let j = 0; j < attributes.length; j++) {\n            const attribute = attributes[j];\n\n            if (attribute.name.startsWith(\"parametric:\")) {\n                attribute.nodeValue.replace(re,  (match, g1, g2) => {\n                    this.processExpressionTerm(g1)\n                });\n            }\n        }\n\n    }\n\n\n    processExpressionTerm(term) {\n        const expression = term\n            .replace(/\\{/g, '')\n            .replace(/\\(/g, '')\n            .replace(/\\)/g, '')\n            .replace(/\\}/g, '')\n            .replace(/\\+/g, ' ')\n            .replace(/\\-/g, ' ')\n            .replace(/\\^/g, ' ')\n            .replace(/\\//g, ' ')\n            .replace(/\\*/g, ' ')\n            .replace(/,/g, ' ')\n            .replace(/'/g, ' ');\n\n        const terms = expression.split(\" \");\n\n        for (let term in terms) {\n            if (!terms[term] || !isNaN(terms[term])) {\n                continue;\n            }\n\n            if (!this.parameters[terms[term]]) {\n                this.parameters[terms[term]] = 0;\n            }\n        }\n\n    }\n\n\n\n    applyParameters(params) {\n        // Substitutes the values in parameters into the SVG\n        // svg = svg ? svg : d3.select(\"parametric-svg\").select(\"svg\").node();\n        params = params ? params : this.parameters;\n\n        // parametricSvg(svg, parameters);\n\n        const tagNames = [\"rect\", \"circle\", \"ellipse\", \"line\", \"polyline\", \"polygon\",\n            \"text\", \"tspan\", \"tref\", \"textPath\", \"altGlyph\", \"altGlyphDef\", \"altGlyphItem\", \"glyphRef\",\n            \"marker\", \"path\"];\n\n        const re = /\\{(.+?)\\}/g;\n\n        for (let i in tagNames) {\n\n            const tags = this.svg.getElementsByTagName(tagNames[i]);\n\n            for (let j in tags) {\n                let tag = tags[j];\n                for (let k in tag.attributes) {\n                    let name = tag.attributes[k].name;\n                    let value = tag.attributes[k].nodeValue;\n\n                    if (name && name.startsWith(\"parametric:\")) {\n\n                        name = name.substr(11);\n                        value = value.replace(re, function (match, g1, g2) {\n                            return math.evaluate(g1, params)\n                        });\n                        tag.setAttribute(name, value);\n                    }\n                }\n            }\n        }\n\n\n    }\n\n\n    getDefaultParamValues(){\n\n        // TODO: rename, as it sets values rather than just returning them\n\n        const defaultAttribute = this.svg.attributes[\"parametric:defaults\"];\n        if (defaultAttribute) {\n            let assignments = defaultAttribute.nodeValue.split(\";\");\n            let param, value;\n            for (let i in assignments) {\n                [param, value] = assignments[i].split(\"=\");\n                param = param.trim();\n                this.defaultParameters[param] = value;\n\n                // TODO: replaceme\n                //d3.select(\"#parameter-\" + param) .property(\"value\", value);\n            }\n        }\n\n        return this.defaultParameters;\n    }\n\n\n}\n\n\nexport default ParametricSVG;","import React, { useState }  from 'react';\nimport './App.css';\n\n\nimport ParameterList from './ParameterList';\nimport ElementList from \"./ElementList\";\nimport PreviewSVG from \"./PreviewSVG\";\n\n\nimport ParametricSVG from './ParametricSVG';\n\nimport { UnControlled as CodeMirror } from 'react-codemirror2';\n\nimport 'codemirror/mode/shell/shell';\nimport 'codemirror/lib/codemirror.css';\nimport 'codemirror/theme/dracula.css';\n\n\nconst defaultSVGString = `<svg  version=\"1.1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        xmlns:parametric=\"https://parametric-svg.github.io/v0.2\"\n        width=\"500\"\n        height=\"500\"\n        parametric:defaults=\"x=60;y=60;d=5\">\n<circle parametric:cx=\"{x + d}\" parametric:cy=\"{y}\" r=\"40\" stroke=\"black\" stroke-width=\"3\" fill=\"blue\" />\n<circle parametric:cx=\"{x}\" parametric:cy=\"{y}\" r=\"40\" stroke=\"black\" stroke-width=\"3\" fill=\"green\" />\n</svg>`;\n\nfunction App() {\n\n    const [params, setParams] = useState(null);\n    const [defaultParams, setDefaultParams] = useState(null);\n    const [tree, setTree] = useState(null);\n    const [svgString, setSVGString] = useState(defaultSVGString);\n\n    const [cmContents, setCMContents] = useState(null);\n\n    const updateParameter = (param, value) => {\n\n        const newParams = {...params, [param]: value};\n        setParams(newParams);\n\n        const newParamsString = Object.keys(newParams).map(n => `${n}=${newParams[n]}`).join(';');\n\n        const newSVGAttributes = tree.attributes.map(attr => ({\n            name: attr.name,\n            value: attr.name === \"parametric:defaults\" ? newParamsString : attr.value}));\n\n        const newTree = {...tree, attributes: newSVGAttributes};\n        setTree(newTree);\n\n       // newTree\n    };\n\n    const updateTree = (newTree) => {\n        setTree(JSON.parse(JSON.stringify(newTree)));\n    };\n\n    const updateSVGString = () => {\n        const rawSVG = document.getElementById('svg-panel').getElementsByTagName('svg')[0].outerHTML;\n        //const formattedSVG = rawSVG.replace(/>/g,  \">\\n\"); // There is scope for improvement here...\n\n        if (rawSVG !== svgString ){\n            setSVGString(rawSVG);\n            applySVGString(rawSVG);\n        }\n    };\n\n\n\n    const applySVGString = (newSVGString) => {\n        let psvg = new ParametricSVG(newSVGString);\n\n        if (!psvg.error){\n            setParams({...psvg.params, ...psvg.defaultParameters}); // apply defaults where they were defined\n            setDefaultParams(psvg.defaultParameters);\n            setTree(psvg.tree);\n        }\n\n    };\n\n    if (!params){\n        applySVGString(svgString);\n    }\n\n    const handleSVGStringEdit = (value) => {\n       //  setSVGString(value); // this would a re-render, which re-draws the SVG (but form the tree rather than the svg string); PreviewSVG calls updateSVGString, which replaces the svg sring with what has been rendered\n        applySVGString(value);\n    };\n\n    /*\n    let psvg = new ParametricSVG(svgString);\n    const newParams = {...psvg.params, ...psvg.defaultParameters};\n    if (JSON.stringify(params) !== JSON.stringify(newParams)){setParams(newParams)}\n    if (JSON.stringify(defaultParams) !== JSON.stringify(psvg.defaultParameters)){ setDefaultParams(psvg.defaultParameters)}\n    if (JSON.stringify(tree) !== JSON.stringify(psvg.tree)){ setTree(psvg.tree) }\n*/\n\n\n\n/*\n     if (!params){\n            let psvg = new ParametricSVG(svgString);\n\n            setParams({...psvg.params, ...psvg.defaultParameters}); // apply defaults where they were defined\n            setDefaultParams(psvg.defaultParameters);\n            setTree(psvg.tree);\n\n     } else {\n         console.log(`Params is true: ${JSON.stringify(params)}`)\n     }\n\n*/\n\n\n\n    const loadSVGString = (string) =>{\n         // need to do several things:\n        // re-parse, to set params/default params\n        // set svgString\n    }\n\n\n    let cmOptions = {\n        lineNumberFormatter: _ => '',\n        lineNumbers: true,\n        lineWrapping: true,\n        // mode: Constants.CodeMirror.Mode.SHELL,\n        //readOnly: true,\n        value: svgString,\n        theme: 'dracula'\n    };\n\n\n     var codeMirrorEditor;\n     let codeMirrorEditor2;\n  return (\n\n<div>\n\n    <div className=\"page-header\">\n        <h1>Parametric SVG editor</h1>\n        <p className=\"lead\">An editor for SVG images in which attributes can contain parameters.</p>\n      </div>\n\n    <div className=\"parent\">\n        <div className=\"div1\" id=\"code-panel\">\n\n            <div id=\"parameters\">\n                <ParameterList params={params} defaultParams={defaultParams} updateParameter={updateParameter}/>\n            </div>\n\n            <div id=\"elements\">\n                <ElementList tree={tree}  params={params} defaultParams={defaultParams} updateTree={updateTree}/>\n            </div>\n\n\n        </div>\n\n        <div className=\"div2\" id=\"svg-panel\">\n            <PreviewSVG tree={tree} params={params} defaultParams={defaultParams} updateSVGString={updateSVGString}/>\n        </div>\n\n    </div>\n\n    <CodeMirror value={svgString}  onBlur={() => null} options={cmOptions} onChange={(Editor, data, value) => {setCMContents(value)}}  />\n\n\n    <button onClick={(ev) => {\n        applySVGString(cmContents); // TODO: this updates the SVG, but changes do no propogate to the elements list\n    }} > Update!</button>\n\n    </div>\n  );\n}\n\n//onChange={(editor, data, value) => {handleSVGStringEdit(value)}}\n\n\n\n\n\n\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}